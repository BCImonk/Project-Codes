# -*- coding: utf-8 -*-
"""Skeleton Code for Logistics and Analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10UIa8xxIyzsVtglwTroVrwYHd6NTzIlp

# Libraries ðŸ“•ðŸ“—ðŸ“˜
"""

import os #paths to file
import numpy as np # linear algebra
import pandas as pd # data processing
import warnings# warning filter
#ploting libraries
import matplotlib.pyplot as plt 
import seaborn as sns
#relevant ML libraries
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
#ML models
from xgboost import XGBClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
#default theme
sns.set(context='notebook', style='darkgrid', palette='deep', font='sans-serif', font_scale=1, color_codes=False, rc=None)
#warning hadle
warnings.filterwarnings("ignore")

"""# File path ðŸ“‚"""

#list all files under the input directory
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

#path for the training set
tr_path = #TBD Later
#path for the testing set
te_path = #TBD Later

"""# Preprocessing and Data Analysis ðŸ’»

## First look at the data:

Training set:
"""

# read in csv file as a DataFrame
tr_df = pd.read_csv(tr_path)
# explore the first 5 rows
tr_df.head()

"""Testing set:"""

# read in csv file as a DataFrame
te_df = pd.read_csv(te_path)
# explore the first 5 rows
te_df.head()

"""Size of each data set:"""

print(f"training set (row, col): {tr_df.shape}\n\ntesting set (row, col): {te_df.shape}")

"""### Now the focus is shifted for the preprocessing of the training dataset."""

#column information
tr_df.info(verbose=True, null_counts=True)

#summary statistics
tr_df.describe()

#the Id column is not needed, let's drop it for both test and train datasets
tr_df.drop('Loan_ID',axis=1,inplace=True)
te_df.drop('Loan_ID',axis=1,inplace=True)
#checking the new shapes
print(f"training set (row, col): {tr_df.shape}\n\ntesting set (row, col): {te_df.shape}")

"""## Missing values ðŸš«"""

#missing values in decsending order
tr_df.isnull().sum().sort_values(ascending=False)

#filling the missing data
for col in null_cols:
    print(f"{col}:\n{tr_df[col].value_counts()}\n","-"*50)
    tr_df[col] = tr_df[col].fillna(
    tr_df[col].dropna().mode().values[0] )   
tr_df.isnull().sum().sort_values(ascending=False)
print("After filling missing values\n\n","#"*50,"\n")
for col in null_cols:
    print(f"\n{col}:\n{tr_df[col].value_counts()}\n","-"*50)

"""## Data visalization ðŸ“Š

Firstly we need to split our data to categorical and numerical data,


using the `.select_dtypes('dtype').columns.to_list()` combination.

## Region Demand distribution
"""

#list of all the columns.columns
#Cols = tr_df.tolist()
#list of all the numeric columns
num = tr_df.select_dtypes('number').columns.to_list()
#list of all the categoric columns
cat = tr_df.select_dtypes('object').columns.to_list()
#numeric df
region_num =  tr_df[num]
#categoric df
region_cat = tr_df[cat]

print(tr_df[cat[-1]].value_counts())
#tr_df[cat[-1]].hist(grid = False)
#print(i)
total = float(len(tr_df[cat[-1]]))
plt.figure(figsize=(8,10))
sns.set(style="whitegrid")
ax = sns.countplot(tr_df[cat[-1]])
for p in ax.patches:
    height = p.get_height()
    ax.text(p.get_x()+p.get_width()/2.,height + 3,'{:1.2f}'.format(height/total),ha="center") 
plt.show()

"""Let's plot our data

Numeric:
"""

for i in region_num:
    plt.hist(region_num[i])
    plt.title(i)
    plt.show()

"""Categorical (split by Region Demand):"""

for i in cat[:-1]: 
    plt.figure(figsize=(15,10))
    plt.subplot(2,3,1)
    sns.countplot(x=i ,hue='Region_Status', data=tr_df ,palette='plasma')
    plt.xlabel(i, fontsize=14)

"""## Encoding data to numeric"""

# adding the new numeric values from the to_numeric variable to both datasets
tr_df = tr_df.applymap(lambda lable: to_numeric.get(lable) if lable in to_numeric else lable)
te_df = te_df.applymap(lambda lable: to_numeric.get(lable) if lable in to_numeric else lable
# checking the our manipulated dataset for validation
print(f"training set (row, col): {tr_df.shape}\n\ntesting set (row, col): {te_df.shape}\n")
print(tr_df.info(), "\n\n", te_df.info())

"""## Correlation matrix """

#plotting the correlation matrix
sns.heatmap(tr_df.corr() ,cmap='cubehelix_r')

"""### Correlation table for a more detailed analysis:"""

#correlation table
corr = tr_df.corr()
corr.style.background_gradient(cmap='coolwarm').set_precision(2)

"""# Machine learning models

First of all we will divide our dataset into two variables `X` as the features we defined earlier and `y` as the `Region_Demand` the target value we want to predict.

## Models we will use:

* **Decision Tree** 
* **Random Forest**
* **XGBoost**
* **Logistic Regression**

## The Process of Modeling the Data:

1. Importing the model

2. Fitting the model

3. Predicting Region Demand

4. Classification report by Region Demand

5. Overall accuracy

"""

y = tr_df['Region Demand']
X = tr_df.drop('Region Demand', axis = 1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)

"""## Decision Tree

![](https://i.pinimg.com/originals/eb/08/05/eb0805eb6e34bf3eac5ab4666bbcc167.gif)
"""

DT = DecisionTreeClassifier()
DT.fit(X_train, y_train)
y_predict = DT.predict(X_test)
#  prediction Summary by species
print(classification_report(y_test, y_predict))
# Accuracy score
DT_SC = accuracy_score(y_predict,y_test)
print(f"{round(DT_SC*100,2)}% Accurate")

"""### Csv results of the test for our model:
You can see each predition and true value side by side by the csv created in the output directory.
"""

Decision_Tree=pd.DataFrame({'y_test':y_test,'prediction':y_predict})
Decision_Tree.to_csv("Dection Tree.csv")

"""## Random Forest

![](https://miro.medium.com/max/1280/1*9kACduxnce_JdTrftM_bsA.gif)
"""

RF = RandomForestClassifier()
RF.fit(X_train, y_train)
y_predict = RF.predict(X_test)
#  prediction Summary by species
print(classification_report(y_test, y_predict))
# Accuracy score
RF_SC = accuracy_score(y_predict,y_test)
print(f"{round(RF_SC*100,2)}% Accurate")

"""### Csv results of the test for our model:

<table>
  <tr><td>
    <img src="https://miro.medium.com/max/900/1*a99bY1VkmfXhqW-5uAX28w.jpeg"
         width="200" height="300">
      <tr><td align="center">
  </td></tr>
  </td></tr>
</table>

You can see each predition and true value side by side by the csv created in the output directory.
"""

Random_Forest=pd.DataFrame({'y_test':y_test,'prediction':y_predict})
Random_Forest.to_csv("Random Forest.csv")

"""## XGBoost

![](https://f-origin.hypotheses.org/wp-content/blogs.dir/253/files/2015/06/boosting-algo-3.gif)
"""

XGB = XGBClassifier()
XGB.fit(X_train, y_train)
y_predict = XGB.predict(X_test)
#  prediction Summary by species
print(classification_report(y_test, y_predict))
# Accuracy score
XGB_SC = accuracy_score(y_predict,y_test)
print(f"{round(XGB_SC*100,2)}% Accurate")

"""### Csv results of the test for our model:

<table>
  <tr><td>
    <img src="https://miro.medium.com/max/900/1*a99bY1VkmfXhqW-5uAX28w.jpeg"
         width="200" height="300">
      <tr><td align="center">
  </td></tr>
  </td></tr>
</table>

You can see each predition and true value side by side by the csv created in the output directory.
"""

XGBoost=pd.DataFrame({'y_test':y_test,'prediction':y_predict})
XGBoost.to_csv("XGBoost.csv")

"""## Logistic Regression
Now, I will explore the Logistic Regression model.

<table>
  <tr><td>
    <img src="https://files.realpython.com/media/log-reg-2.e88a21607ba3.png"
          width="500" height="400">
      <tr><td align="center">
  </td></tr>
  </td></tr>
</table>
"""

LR = LogisticRegression()
LR.fit(X_train, y_train)
y_predict = LR.predict(X_test)
#  prediction Summary by species
print(classification_report(y_test, y_predict))
# Accuracy score
LR_SC = accuracy_score(y_predict,y_test)
print('accuracy is',accuracy_score(y_predict,y_test))

Logistic_Regression=pd.DataFrame({'y_test':y_test,'prediction':y_predict})
Logistic_Regression.to_csv("Logistic Regression.csv")

"""### Csv results of the test for our model:

<table>
  <tr><td>
    <img src="https://miro.medium.com/max/900/1*a99bY1VkmfXhqW-5uAX28w.jpeg"
         width="200" height="300">
      <tr><td align="center">
  </td></tr>
  </td></tr>
</table>

You can see each predition and true value side by side by the csv created in the output directory.

# Conclusion

1. `Demand History` is a very important variable  because of its high correlation with `Region Demand` therefor showind high Dependancy for the latter.
"""

score = [DT_SC,RF_SC,XGB_SC,LR_SC]
Models = pd.DataFrame({
    'n_neighbors': ["Decision Tree","Random Forest","XGBoost", "Logistic Regression"],
    'Score': score})
Models.sort_values(by='Score', ascending=False)